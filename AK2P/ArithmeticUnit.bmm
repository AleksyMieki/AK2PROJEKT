library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity ArithmeticUnit is
  port(
    clk         : in std_logic;
    reset       : in std_logic;
    operand1    : in std_logic_vector(15 downto 0);
    operand2    : in std_logic_vector(15 downto 0);
    add_enable  : in std_logic;
    sub_enable  : in std_logic;
    mul_enable  : in std_logic;
    div_enable  : in std_logic;
    eq_enable   : in std_logic;
    reset_enable: in std_logic;
    temp_result : out std_logic_vector(15 downto 0);
    result      : out std_logic_vector(15 downto 0)
  );
end ArithmeticUnit;

architecture Behavioral of ArithmeticUnit is
begin
  process(clk, reset, add_enable, sub_enable, mul_enable, div_enable)
    variable operand1_int : integer range -32768 to 32767;
    variable operand2_int : integer range -32768 to 32767;
    variable result_int : integer range -65536 to 65535;
  begin
    if reset = '1' then
      temp_result <= (others => '0');
    elsif rising_edge(clk) then
      operand1_int := to_integer(signed(operand1));
      operand2_int := to_integer(signed(operand2));

      if add_enable = '1' then
        result_int := operand1_int + operand2_int;
      elsif sub_enable = '1' then
        result_int := operand1_int - operand2_int;
      elsif mul_enable = '1' then
        result_int := operand1_int * operand2_int;
      elsif div_enable = '1' then
        if operand2_int /= 0 then
          result_int := operand1_int / operand2_int;
        else
          result_int := 0;  -- Handle division by zero
        end if;
      else
        result_int := to_integer(signed(temp_result));
      end if;

      if result_int < -32768 then
        result_int := -32768;
      elsif result_int > 32767 then
        result_int := 32767;
      end if;

      temp_result <= std_logic_vector(to_signed(result_int, 16));
    end if;
  end process;

  process(clk, reset, eq_enable)
  begin
    if reset = '1' or reset_enable = '1' then
      result <= (others => '0');
    elsif rising_edge(clk) and eq_enable = '1' then
      result <= temp_result;
    end if;
  end process;
end Behavioral;
